[{"uri":"https://fsprojects.github.io/BioProviders/index.html","title":"BioProviders: Simplifying Access to Bioinformatic Datasets\r\n","content":"BioProviders: Simplifying Access to Bioinformatic Datasets\r\n================================\r\n\r\nThe BioProviders package provides tools and functionality to simplify accessing and manipulating bioinformatic data.\r\nThe [.NET Bio](https://github.com/dotnetbio/bio) and [BioFSharp](https://github.com/CSBiology/BioFSharp) libraries\r\nare used to parse and format the data provided by this package.\r\n\r\nBioProviders is available through [NuGet](https://nuget.org/packages/BioProviders). \r\n[![NuGet Status](//img.shields.io/nuget/v/BioProviders.svg?style=flat)](https://www.nuget.org/packages/BioProviders/)\r\n\r\n\r\n## Type Providers\r\n\r\n\u003Cdiv class=\u0022container-fluid\u0022 style=\u0022margin:15px 0px 15px 0px;\u0022\u003E\r\n    \u003Cdiv class=\u0022row-fluid\u0022\u003E\r\n        \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\r\n        \u003Cdiv class=\u0022span10\u0022 id=\u0022anim-holder\u0022\u003E\r\n            \u003Ca id=\u0022lnk\u0022 href=\u0022img/GenBankProvider.gif\u0022\u003E\u003Cimg id=\u0022anim\u0022 src=\u0022img/GenBankProvider.gif\u0022 /\u003E\u003C/a\u003E\r\n        \u003C/div\u003E\r\n        \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\r\n    \u003C/div\u003E\r\n\u003C/div\u003E\r\n\r\nBioProviders implements Type Providers for accessing bioinformatic datasets. These Type Providers allow remote access\r\nto data sources (e.g., GenBank) and type-safe representations of their data (e.g., GenBank Flat File).\r\n\r\n* [GenBank Type Provider](library/GenBankProvider.html) - access to GenBank data using the \u0060GenBankProvider\u003C..\u003E\u0060 type.\r\n* [RefSeq Type Provider](library/RefSeqProvider.html) - access to RefSeq data using the \u0060RefSeqProvider\u003C..\u003E\u0060 type.\r\n\r\n\r\n## Contributing and Copyright\r\n\r\nThe project is hosted on [GitHub](https://github.com/AlexKenna/BioProviders) where you can \r\n[report issues](https://github.com/AlexKenna/BioProviders/issues), fork the project and submit pull requests.\r\n\r\nThe library is available under the OSI-approved MIT license. For more information see the \r\n[License file](https://github.com/AlexKenna/BioProviders/blob/main/LICENSE.md) in the GitHub repository."},{"uri":"https://fsprojects.github.io/BioProviders/library/GenBankProvider.html","title":"GenBank Type Provider\r\n","content":"(**\n---\ncategory: Type Providers\ncategoryindex: 1\nindex: 1\n---\n*)\n\n(**\n\n[![Script](../img/badge-script.svg)]({{root}}/{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](../img/badge-notebook.svg)]({{root}}/{{fsdocs-source-basename}}.ipynb)\n\n# GenBank Type Provider\n\nThis article describes how to use the GenBank Type Provider to remotely access genomic data stored in the \n[GenBank](https://www.ncbi.nlm.nih.gov/genbank/) database. This Type Provider collects and parses the genomic data\nfor a specified organism and generates a static type containing its metadata and sequence. \n\nThe GenBank Type Provider uses [.NET Bio](https://github.com/dotnetbio/bio) to parse the GenBank data files\nand [BioFSharp](https://github.com/CSBiology/BioFSharp) to provide utilities for manipulating genomic sequences.\n\n## Loading BioProviders Package\n\nTo load the GenBank Type Provider, a script can use the NuGet syntax to reference the BioProviders package, shown below.\n\nYou can optionally include the BioFSharp package. While it\u0027s not required to use the basic BioProviders functions, it can be used to explore the metadata of the provided types, as shown in a later example.\n*)\n\n#r \u0022nuget: BioProviders\u0022\n#r \u0022nuget: BioFSharp\u0022\n\n(** If creating an F# library or application, BioProviders can be added as a package reference. You can use your IDE for this, or use the \u0060\u0060\u0060dotnet add package BioProviders\u0060\u0060\u0060 command in your project folder from the command line.\n\nBioProviders can then be used in your script or code by using an open command. Opening its dependencies should not be required. (BioFSharp is loaded for future examples.)\n*)\n\nopen BioProviders\nopen BioFSharp\n\n(**\n## GenBankProvider Example\n\nThe GenBank Type Provider will be demonstrated for [this GenBank assembly](https://www.ncbi.nlm.nih.gov/nuccore/CP012411) \nof the *Candidatus Carsonella ruddii* species. To create a typed representation of the assembly, two pieces of information\nmust be given to the Type Provider:\n\n* Species name\n* GenBank assembly accession\n\nFor this example, the species name is \u0022Candidatus Carsonella ruddii\u0022 and the GenBank assembly accession is \u0022GCA_001274515.1\u0022.\nTo find this information:\n\n* Visit https://www.ncbi.nlm.nih.gov/datasets/\n* Search for the name of the species\n* Select to view all genones of the species\n\nYou can then select the assembly\u0027s GenBank (as well as RefSeq) accession from the list that appears.\n\n![Animation of findng a GenBank assembly accession on NCBI.](../img/GenBank_Info.gif \u0022Animation of findng a GenBank assembly accession on NCBI.\u0022).\n\nPassing this information to the Type Provider generates the Assembly Type. The genomic data can then be extracted from the \nAssembly Type by invoking the Genome method. This is demonstrated below.\n*)\n\n// Define species name and GenBank assembly accession.\nlet [\u003CLiteral\u003E] Species = \u0022Candidatus Carsonella ruddii\u0022\nlet [\u003CLiteral\u003E] Accession = \u0022GCA_001274515.1\u0022\n\n// Create GenBank assembly type.\ntype Ruddii = GenBankProvider\u003CSpecies, Accession\u003E\n\n// Extract statically-typed genome data.\nlet genome = Ruddii.Genome()\n\n(**\n### Metadata\n\nEach genome is accompanied by metadata describing the organism and sequence recorded in the assembly. This metadata can\nbe extracted using the Metadata field of the Genome Type created previously. The Metadata type is largely based on that\nprovided by [.NET Bio](http://dotnetbio.github.io/Help/html/319bf2e6-4fcf-9f93-586f-fc7ffcf04a83.htm), with modifications\nmade to be more idiomatic with F#.\n\nBelow is an example of how the raw metadata type can be retrieved and displayed:\n\n*)\n\n// Extract the metadata.\nlet metadata = genome.Metadata\n\n// Display the metadata type.\nprintf \u0022%A\u0022 metadata\n\n(*** include-output ***)\n\n(** \nThe metadata type consists of many fields, though not all fields of the metadata exist for all assemblies. Therefore, they are provided as option types, on which a match expression can be used. Below are examples of accessing fields from the example assembly.\n  \u2705 Example - Accessing a field that is provided. \n*)\n\n// Print definition if exists.\nmatch metadata.Definition with\n| Some definition -\u003E printf \u0022%s\u0022 definition\n| None -\u003E printf \u0022No definition provided.\u0022\n\n(*** include-output ***)\n\n(**  \n  \u274C Example - Accessing a field that is not provided. \n*)\n\n// Print database source if exists.\nmatch metadata.DbSource with\n| Some dbsource -\u003E printf \u0022%s\u0022 dbsource\n| None -\u003E printf \u0022No database source provided.\u0022\n\n(*** include-output ***)\n\n(**\n### Sequence\n\nThe genomic sequence for the organism can be extracted using the Sequence field of the Genome Type created previously.\nThis field provides a BioFSharp [BioSeq](https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html) containing\na series of [Nucleotides](https://csbiology.github.io/BioFSharp//reference/biofsharp-nucleotides-nucleotide.html). More\ncan be read about BioFSharp containers [here](https://csbiology.github.io/BioFSharp//BioCollections.html). \n\nAn example of accessing and manipulating the GenBankProvider genomic sequence using BioFSharp is provided below:\n*)\n\n// Extract the BioFSharp BioSeq.\nlet sequence = genome.Sequence\n\n// Display the sequence type.\nprintf \u0022%A\u0022 sequence\n\n(*** include-output ***)\n\n// Take the complement, then transcribe and translate the coding strand.\nsequence\n|\u003E BioSeq.complement\n|\u003E BioSeq.transcribeCodingStrand\n|\u003E BioSeq.translate 0\n\n(*** include-it ***)\n\n\n(**\n## Wildcard Operators\n\nWildcard operators are supported in both the Species and Accession provided to the GenBankProvider. By using asterisks \u0022\\*\u0022\nat the end of a Species or Accession name, species or accessions starting with the provided pattern will be matched. \n\nFor example, we can get all *Staphylococcus* species starting with the letter \u0027c\u0027 and assembly accesions starting with\n\u0027GCA_01\u0027:\n*)\n\n// Define species name and GenBank assembly accession using wildcards.\nlet [\u003CLiteral\u003E] SpeciesPattern = \u0022Staphylococcus c*\u0022\nlet [\u003CLiteral\u003E] AccessionPattern = \u0022GCA_01*\u0022\n\n// Create GenBank type containing all species matching the species pattern.\ntype SpeciesCollection = GenBankProvider\u003CSpeciesPattern, AccessionPattern\u003E\n\n// Select the species types.\ntype Capitis = SpeciesCollection.\u0060\u0060Staphylococcus capitis\u0060\u0060\ntype Cohnii = SpeciesCollection.\u0060\u0060Staphylococcus cohnii\u0060\u0060\n\n// Select assemblies.\ntype Assembly1 = Capitis.\u0060\u0060GCA_012926605.1\u0060\u0060\ntype Assembly2 = Capitis.\u0060\u0060GCA_015645205.1\u0060\u0060\ntype Assembly3 = Cohnii.\u0060\u0060GCA_013349225.1\u0060\u0060\ntype Assembly4 = Cohnii.\u0060\u0060GCA_014884245.1\u0060\u0060\n\n// Extract statically-typed genome data.\nlet data = Assembly1.Genome()\n\n// Show the assembly\u0027s definition.\nmatch data.Metadata.Definition with\n| Some definition -\u003E printf \u0022%s\u0022 definition\n| None -\u003E printf \u0022No definition provided.\u0022\n\n(*** include-output ***)\n\n(**\nThe Accession parameter can also be omitted from the GenBankProvider. In this case, all assemblies for the given species will\nbe matched. For example:\n*)\n\n// Define species name.\nlet [\u003CLiteral\u003E] SpeciesName = \u0022Staphylococcus lugdunensis\u0022\n\n// Create GenBank type containing all assemblies for the species.\ntype Assemblies = GenBankProvider\u003CSpeciesName\u003E\n\n// Select assemblies.\ntype Assembly = Assemblies.\u0060\u0060GCA_001546615.1\u0060\u0060\n\n// Show the assembly\u0027s primary accession.\nmatch (Assembly.Genome()).Metadata.Accession with\n| Some accession -\u003E match accession.Primary with\n                    | Some primary -\u003E printf \u0022%s\u0022 primary\n                    | None -\u003E printf \u0022No primary accession provided.\u0022\n| None -\u003E printf \u0022No accession provided.\u0022\n\n(*** include-output ***)"},{"uri":"https://fsprojects.github.io/BioProviders/library/RefSeqProvider.html","title":"RefSeq Type Provider\r\n","content":"(**\n---\ncategory: Type Providers\ncategoryindex: 1\nindex: 2\n---\n*)\n\n(**\n\n[![Script](../img/badge-script.svg)]({{root}}/{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](../img/badge-notebook.svg)]({{root}}/{{fsdocs-source-basename}}.ipynb)\n\n# RefSeq Type Provider\n\nThis article describes how to use the RefSeq Type Provider to remotely access genomic data stored in the\n[RefSeq](https://www.ncbi.nlm.nih.gov/genbank/) database. This Type Provider collects and parses the genomic data\nfor a specified organism and generates a static type containing its metadata and sequence.\n\nThe RefSeq Type Provider uses [.NET Bio](https://github.com/dotnetbio/bio) to parse the RefSeq data files\nand [BioFSharp](https://github.com/CSBiology/BioFSharp) to provide utilities for manipulating genomic sequences.\n\n## Loading BioProviders Package\n\nTo load the RefSeq Type Provider, a script can use the NuGet syntax to reference the BioProviders package, shown below.\n\nYou can optionally include the BioFSharp package. While it\u0027s not required to use the basic BioProviders functions, it can be used to explore the metadata of the provided types, as shown in a later example.\n*)\n\n#r \u0022nuget: BioProviders\u0022\n#r \u0022nuget: BioFSharp\u0022\n\n(** If creating an F# library or application, BioProviders can be added as a package reference. You can use your IDE for this, or use the \u0060\u0060\u0060dotnet add package BioProviders\u0060\u0060\u0060 command in your project folder from the command line.\n\nBioProviders can then be used in your script or code by using an open command. Opening its dependencies should not be required. (BioFSharp is loaded for future examples.)\n*)\n\nopen BioProviders\nopen BioFSharp\n\n(**\n## RefSeqProvider Example\n\nThe RefSeq Type Provider will be demonstrated for [this RefSeq assembly](https://www.ncbi.nlm.nih.gov/datasets/genome/GCF_001224225.1/)\nof the *Staphylococcus borealis* species. To create a typed representation of the assembly, two pieces of information\nmust be given to the Type Provider:\n\n* Species name\n* RefSeq assembly accession\n\nFor this example, the species name is \u0022Staphylococcus borealis\u0022 and the RefSeq assembly accession is \u0022GCF_001224225.1\u0022.\nTo find this information:\n\n* Visit https://www.ncbi.nlm.nih.gov/datasets/\n* Search for the name of the species\n* Select to view all genones of the species\n\nYou can then select the assembly\u0027s RefSeq (as well as GenBank) accession from the list that appears.\n\n![Animation of findng a RefSeq assembly accession on NCBI.](../img/RefSeq_Info.gif \u0022Animation of findng a RefSeq assembly accession on NCBI.\u0022).\n\nPassing this information to the Type Provider generates the Assembly Type. The genomic data can then be extracted from the\nAssembly Type by invoking the Genome method. This is demonstrated below.\n*)\n\n// Define species name and RefSeq assembly accession.\nlet [\u003CLiteral\u003E] Species = \u0022Staphylococcus borealis\u0022\nlet [\u003CLiteral\u003E] Accession = \u0022GCF_001224225.1\u0022\n\n// Create RefSeq assembly type.\ntype Borealis = RefSeqProvider\u003CSpecies, Accession\u003E\n\n// Extract statically-typed genome data.\nlet genome = Borealis.Genome()\n\n(**\n### Metadata\n\nEach genome is accompanied by metadata describing the organism and sequence recorded in the assembly. This metadata can\nbe extracted using the Metadata field of the Genome Type created previously. The Metadata type is largely based on that\nprovided by [.NET Bio](http://dotnetbio.github.io/Help/html/319bf2e6-4fcf-9f93-586f-fc7ffcf04a83.htm), with modifications\nmade to be more idiomatic with F#.\n\nBelow is an example of how the raw metadata type can be retrieved and displayed:\n\n*)\n\n// Extract the metadata.\nlet metadata = genome.Metadata\n\n// Display the metadata type.\nprintf \u0022%A\u0022 metadata\n\n(*** include-output ***)\n\n(**\nThe metadata type consists of many fields, though not all fields of the metadata exist for all assemblies. Therefore, they are provided as option types, on which a match expression can be used. Below are examples of accessing fields from the example assembly.\n  \u2705 Example - Accessing a field that is provided.\n*)\n\n// Print definition if exists.\nmatch metadata.Definition with\n| Some definition -\u003E printf \u0022%s\u0022 definition\n| None -\u003E printf \u0022No definition provided.\u0022\n\n(*** include-output ***)\n\n(**\n  \u274C Example - Accessing a field that is not provided.\n*)\n\n// Print database source if exists.\nmatch metadata.DbSource with\n| Some dbsource -\u003E printf \u0022%s\u0022 dbsource\n| None -\u003E printf \u0022No database source provided.\u0022\n\n(*** include-output ***)\n\n(**\n### Sequence\n\nThe genomic sequence for the organism can be extracted using the Sequence field of the Genome Type created previously.\nThis field provides a BioFSharp [BioSeq](https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html) containing\na series of [Nucleotides](https://csbiology.github.io/BioFSharp//reference/biofsharp-nucleotides-nucleotide.html). More\ncan be read about BioFSharp containers [here](https://csbiology.github.io/BioFSharp//BioCollections.html).\n\nAn example of accessing and manipulating the RefSeqProvider genomic sequence using BioFSharp is provided below:\n*)\n\n// Extract the BioFSharp BioSeq.\nlet sequence = genome.Sequence\n\n// Display the sequence type.\nprintf \u0022%A\u0022 sequence\n\n(*** include-output ***)\n\n// Take the complement, then transcribe and translate the coding strand.\nsequence\n|\u003E BioSeq.complement\n|\u003E BioSeq.transcribeCodingStrand\n|\u003E BioSeq.translate 0\n\n(*** include-it ***)\n\n\n(**\n## Wildcard Operators\n\nWildcard operators are supported in both the Species and Accession provided to the RefSeqProvider. By using asterisks \u0022\\*\u0022\nat the end of a Species or Accession name, species or accessions starting with the provided pattern will be matched.\n\nFor example, we can get all *Staphylococcus* species starting with the letter \u0027c\u0027 and assembly accesions starting with\n\u0027GCF_01\u0027:\n*)\n\n// Define species name and RefSeq assembly accession using wildcards.\nlet [\u003CLiteral\u003E] SpeciesPattern = \u0022Staphylococcus c*\u0022\nlet [\u003CLiteral\u003E] AccessionPattern = \u0022GCF_01*\u0022\n\n// Create RefSeq type containing all species matching the species pattern.\ntype SpeciesCollection = RefSeqProvider\u003CSpeciesPattern, AccessionPattern\u003E\n\n// Select the species types.\ntype Capitis = SpeciesCollection.\u0060\u0060Staphylococcus capitis\u0060\u0060\ntype Cohnii = SpeciesCollection.\u0060\u0060Staphylococcus cohnii\u0060\u0060\n\n// Select assemblies.\ntype Assembly1 = Capitis.\u0060\u0060GCF_012926605.1\u0060\u0060\ntype Assembly2 = Capitis.\u0060\u0060GCF_012926635.1\u0060\u0060\ntype Assembly3 = Cohnii.\u0060\u0060GCF_013602215.1\u0060\u0060\ntype Assembly4 = Cohnii.\u0060\u0060GCF_013602265.1\u0060\u0060\n\n// Extract statically-typed genome data.\nlet data = Assembly1.Genome()\n\n// Show the assembly\u0027s definition.\nmatch data.Metadata.Definition with\n| Some definition -\u003E printf \u0022%s\u0022 definition\n| None -\u003E printf \u0022No definition provided.\u0022\n\n(*** include-output ***)\n\n(**\nThe Accession parameter can also be omitted from the RefSeqProvider. In this case, all assemblies for the given species will\nbe matched. For example:\n*)\n\n// Define species name.\nlet [\u003CLiteral\u003E] SpeciesName = \u0022Staphylococcus lugdunensis\u0022\n\n// Create RefSeq type containing all assemblies for the species.\ntype Assemblies = RefSeqProvider\u003CSpeciesName\u003E\n\n// Select assemblies.\ntype Assembly = Assemblies.\u0060\u0060GCF_001546615.1\u0060\u0060\n\n// Show the assembly\u0027s primary accession.\nmatch (Assembly.Genome()).Metadata.Accession with\n| Some accession -\u003E match accession.Primary with\n                    | Some primary -\u003E printf \u0022%s\u0022 primary\n                    | None -\u003E printf \u0022No primary accession provided.\u0022\n| None -\u003E printf \u0022No accession provided.\u0022\n\n(*** include-output ***)"}]